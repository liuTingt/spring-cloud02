API网关服务：Spring Cloud Zuul
请求路由
    传统路由方式：
        单实例配置：
            zuul.routes.<route>.path和zuul.routes.<route>.url参数对的方式进行配置。如下
            添加路由规则，每个路由path对应一个url，需要运维人员花费大量得时间维护各个路由得path和url之间得关系
            zuul.routes.api-a-url.path=/api-a-url/**
            zull.routes.api-a-url.url=http://localhost:8080/
         多实例配置：
            zuul.routes.<route>.path和zuul.routes.<route>.serviceId参数对的方式进行配置。如下
            zuul.routes.api-b.path=/user-service/**
            zuul.routes.api-b.serviceId=hello-service
            ribbon.eureka.enabled=false
            hello.service.ribbon.listOfServers=http://localhost:8080,http://localhost:8081/

     面向服务得路由方式：
        路由得path不是映射具体的url，而是映射到某个具体的服务，而具体的url交给Eureka的服务发现机制去自动维护.通过zuul.routes.<route>.path和zuul.routes.<route>.serviceId
        参数对的方式进行配置，如下：
        zuul.routes.api-a.path=/api-a/**
        zuul.routes.api-a.service-id=hello-service

        zuul.routes.api-b.path=/api-b/**
        zuul.routes.api-b.service-id=feign-consumer

        对于面向服务的路由配置还有一种更简洁的配置方式：
            zuul.routes.<serviceId>=<path>,其中<serviceId>用来指定路由的具体服务名，<path>用来配置匹配的请求表达式，如下：
            zuul.routes.api-c=/hello-service/**
        默认规则：
            当我们为Spring Cloud Zuul构建的API网关服务引入Spring Cloud Eureka之后，它为Eureka中的每个服务都自动创建一个默认路由
            规则，这些默认规则的path会使用serviceId配置的服务名作为请求前缀。如下：
            zuul.routes.hello-service.path=/hello-service/**
            zuul.routes.hello-service.serviceId=hello-service

            zuul.ignored-services参数设置一个服务名匹配表达式来定义不自动创建路由规则。如，设置为zuul.ignored-services=*的时候，zuul将对所有服务不自动创建路由规则。
请求过滤
    自定义过滤器继承ZuulFilter，重写其方法



  API网关对微服务架构重要性在于：
    1、它作为系统的统一入口，屏蔽了系统内部的各个微服务细节
    2、它可以与服务治理框架结合，实现自动化的服务实例维护以及负载均衡的路由转发
    3、它可以实现与接口权限校验与服务业务逻辑的解耦
    4、通过服务网关中的过滤器，在各声明周期去校验请求的内容，将原本在对外服务层做的校验前移，保证了微服务的无状态性，同时降低了微服务的测试
        难度，让服务本身更集中关注业务逻辑处理


注意：
    Spring Cloud Zuul自身包含了Hystrix和Ribbon模块的依赖，所以天生就拥有线程隔离和断路器的自我保护功能，以及对服务调用的客户端负载均衡的功能。
    但是，当使用path和url的映射关系来配置路由规则的时候，对于路由转发的请求不会采用HystrixCommand来包装，所以这类路由请求没有线程隔离和断路器的保护，
    也没有负载均衡的能力。因此，在使用zuul的时候尽量使用path和serviceId组合进行配置。
