spring.application.name=config-server
server.port=7002

# 配置Git仓库位置
spring.cloud.config.server.git.uri=https://github.com/liuTingt/spring-cloud-config
# 可以通过file://前缀来设置文件地址，如：file：//${user.home}/config-repo；${user.home}代表当前用户所属目录

# 配置仓库路径下的相对搜索位置，可以配置多个
spring.cloud.config.server.git.searchPaths=spring_cloud_in_action/config-repo
spring.cloud.config.server.git.username=liuTingt
spring.cloud.config.server.git.password=17839977109lt

# 配置服务注册中心
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/

# 访问配置信息的URL与配置文件的映射关系如下
#/{application}/{profile}[/{label}]；/{application}-{profile}.yml;/{label}/{application}-{profile}.yml; /{application}-{profile}.properties;/{label}/{application}-{profile}.profile
# 上面的URL会映射{application}-{profile}.properties对应的配置文件。其中{label}对应Git上不同的分支。如访问config-label-test分支 http://localhost:7001/didispace/test/config-label-test
# 可以看控制台输出的内容，实质上config-server是通过git clone命令将配置内同复制了一份在本地存储，然后读取这些内容并返回给微服务应用加载。

# 健康检测   可以通过以下配置关闭健康检测器
# spring.cloud.config.server.health.enabled=false

# 安全保护  与Spring Security结合，导入pom依赖，在配置文件中指定用户名和密码;客户端也要加入安全信息来通过校验
#spring.security.user.name=user
#spring.security.user.password=123


# 加密解密   Spring Cloud Config提供了对属性进行加密解密的功能，保护配置文件中的信息安全


# 刷新配置，在spring boot 2.x 之前1.x的management.security.enabled失效，新的配置为
# 新的post请求路径是http://localhost:7002/actuator/bus-refresh
management.endpoints.web.exposure.include=bus-refresh

# RabbitMQ连接和用户信息
#spring.rabbitmq.host=localhost
#spring.rabbitmq.port=5672
#spring.rabbitmq.username=springcloud
#spring.rabbitmq.password=springcloud












